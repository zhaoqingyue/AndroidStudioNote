RxJava2详解
1 RxJava介绍
1.1 定义
RxJava 是一个基于事件流、实现异步操作的库。
1.2 作用
实现异步操作（类似于 Android中的 AsyncTask 、Handler作用）。
1.3 特点
	链式调用
	观察者模式
	异步操作
1.4 原理
基于 一种扩展的观察者模式。
1.5 RxJava观察者模式4个角色
	被观察者（Observable）—— 产生事件
	观察者（Observer）—— 接收事件，并给出响应动作
	订阅（Subscribe）—— 连接 被观察者 & 观察者
	事件（Event）—— 被观察者 & 观察者 沟通的载体
2 RxJava基本用法
	创建被观察者 Observable
	创建观察者 Observer 
	订阅 subscribe

2.1 创建被观察者 Observable 
// 1. 通过create（）创建被观察者 Observable 对象
Observable observable = Observable.create(new ObservableOnSubscribe<String>() {

    @Override
    public void subscribe(ObservableEmitter e) throws Exception {
        // 定义需要发送的事件
        e.onNext("事件A");
        e.onNext("事件B");
        e.onNext("事件C");
        e.onComplete();
    }
});
2.2 创建观察者 Observer 
// 2. 创建观察者 & 定义响应事件的行为
Observer observer = new Observer<String>() {

    @Override
    public void onSubscribe(Disposable d) {
        LogUtils.d(TAG, "开始采用subscribe连接");
    }

    @Override
    public void onNext(String s) {
        LogUtils.d(TAG, "接收到了事件: " + s);
    }

    @Override
    public void onError(Throwable e) {
        LogUtils.d(TAG, "对Error事件作出响应");
    }

    @Override
    public void onComplete() {
        LogUtils.d(TAG, "对Complete事件作出响应");
    }
};
2.3 订阅 subscribe
// 3. 通过通过订阅（subscribe）连接观察者和被观察者
observable.subscribe(observer);
3 RxJava操作符
	创建操作符
	变换操作符
	组合 & 合并操作符
	功能性操作符
	过滤操作符
	条件 & 布尔操作符
3.1 创建操作符
	作用：创建被观察者（Observable）对象 & 发送事件
	应用场景
	完整 & 快速创建被观察者
	定时操作
	周期性操作
	数组/集合遍历
	创建类别
	基本创建
	快速创建
	延迟创建
3.1.1 基本创建
	create
3.1.1.1 create
完整的创建被观察者对象。
 
//  链式调用
Observable.create(new ObservableOnSubscribe<String>() {

    @Override
    public void subscribe(ObservableEmitter e) throws Exception {
        // 定义需要发送的事件
        e.onNext("我是通过create创建的对象发射的信息");
        e.onComplete();
    }
}).subscribe(new Observer<String>() {

    // 默认最先调用 onSubscribe（）
    @Override
    public void onSubscribe(Disposable d) {
    }

    @Override
    public void onNext(String s) {
    }

    @Override
    public void onError(Throwable e) {
    }

    @Override
    public void onComplete() {
    }
});
3.1.2 快速创建
作用：快速的创建被观察者对象。
	just
	fromArray
	fromIterable
	empty
	error
	never
3.1.2.1 just
	作用：快速创建一个被观察者对象
	特点：直接发送传入的事件
	场景：快递创建被观察者对象 & 发送10个以下事件
 
// 1. 创建时传入"Hello World", "Hello RxJava2"
// 在创建后就会发送这些对象，相当于执行了onNext("Hello World")、onNext("Hello RxJava2")
Observable.just("Hello World", "Hello RxJava2")
        // 2. 通过通过订阅（subscribe）连接观察者和被观察者
        // 3. 创建观察者 & 定义响应事件的行为
        .subscribe(new Observer<String>() {

            // 默认最先调用 onSubscribe（）
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(String s) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.2.2 fromArray
	作用：快速创建一个被观察者对象
	特点：直接发送传入的事件
	场景：快递创建被观察者对象 & 发送10个以上事件（数组形式）
// 1. 设置需要传入的数组
String[] items = { "事件A", "事件B", "事件C"};
// 2. 创建被观察者对象（Observable）时传入数组
// 在创建后就会将该数组转换成Observable & 发送该对象中的所有数据
Observable.fromArray(items) .subscribe(new Observer<String>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(String s) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.2.3 fromIterable
	作用：快速创建一个被观察者对象
	特点：直接发送传入的集合List数据
	场景：快递创建被观察者对象 & 发送10个以上事件（集合形式）
3.1.2.4 empty
	作用：创建一个被观察者对象
	特点：仅发送Complete事件，直接通知完成
// 观察者接收后会直接调用onCompleted（）
Observable.empty().subscribe(new Observer<Object>() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Object o) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.2.5 error
	作用：创建一个被观察者对象
	特点：仅发送Error事件，直接通知异常
// 观察者接收后会直接调用onError（）
Observable.error(new RuntimeException())
        .subscribe(new Observer<Object>() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Object o) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.2.6 never
	作用：创建一个被观察者对象
	特点：发送任何事件
// 观察者接收后什么都不调用
Observable.never()
        .subscribe(new Observer<Object>() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Object o) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.3 延迟创建
需求场景：
	定时操作：在经过了x秒后，需要自动执行y操作
	周期性操作：每隔x秒后，需要自动执行y操作

包括以下操作符：
	defer
	timer
	interval
	intervalRange
	range
	rangeLong
3.1.3.1 defer
	作用：直到有观察者（Observer ）订阅时，才动态创建被观察者对象（Observable） & 发送事件
	通过 Observable工厂方法创建被观察者对象（Observable）
	每次订阅后，都会得到一个刚创建的最新的Observable对象，这可以确保Observable对象里的数据是最新的
	场景：动态创建被观察者对象（Observable）& 获取最新的Observable对象数据
 
// 1. 第1次对str赋值
str = "初始化str";

// 2. 通过defer定义被观察者对象
// 注：此时被观察者对象还没创建
Observable<String> observable = Observable.defer(new Callable<ObservableSource<? extends String>>() {

    @Override
    public ObservableSource<? extends String> call() throws Exception {
        return Observable.just(str);
    }
});

// 2. 第2次对i赋值
str = "我是订阅后的defer";
/**
 * 3. 观察者开始订阅
 * 注：此时，才会调用defer（）创建被观察者对象（Observable）
 */
// 只有执行subscribe才创建Observable
observable.subscribe(new Observer<String>() {

    @Override
    public void onSubscribe(Disposable d) {
    }

    @Override
    public void onNext(String s) {
    }

    @Override
    public void onError(Throwable e) {
    }

    @Override
    public void onComplete() {
    }
});
3.1.3.2 timer
	作用：创建一个被观察者对象
	特点：延迟指定时间后，发送1个数值0（Long类型）
 
Observable.timer(delay, TimeUnit.SECONDS)
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Long>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Long value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.3.3 interval
	作用：创建一个被观察者对象
	特点：每隔指定时间就发送事件
 
/**
 * 参数说明：
 * 参数1 = 第1次延迟时间；
 * 参数2 = 间隔时间数字；
 * 参数3 = 时间单位；
 */
Observable.interval(3, 1, TimeUnit.SECONDS)
        // 该例子发送的事件序列特点：
        // 延迟3s后发送事件，每隔1秒产生1个数字（从0开始递增1，无限个）
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Long>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Long value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
        	}
        });
3.1.3.4 intervalRange
	作用：创建一个被观察者对象
	特点：每隔指定时间就发送事件，可指定发送的数据的数量
/**
 * 参数说明：
 * 参数1 = 事件序列起始点；
 * 参数2 = 事件数量；
 * 参数3 = 第1次事件延迟发送时间；
 * 参数4 = 间隔时间数字；
 * 参数5 = 时间单位
 */
Observable.intervalRange(3, 10, 2, 1, TimeUnit.SECONDS)
        // 该例子发送的事件序列特点：
        // 1. 从3开始，一共发送10个事件；
        // 2. 第1次延迟2s发送，之后每隔2秒产生1个数字
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Long>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Long value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.3.5 range
	作用：创建一个被观察者对象
	特点：连续发送一个事件序列，可指定范围
 
/**
 * 参数说明：
 * 参数1 = 事件序列起始点；
 * 参数2 = 事件数量；
 * 注：若设置为负数，则会抛出异常
 */
Observable.range(3, 10)
        // 该例子发送的事件序列特点：
        // 从3开始发送，每次发送事件递增1，一共发送10个事件
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.1.3.6 rangeLong
	作用：创建一个被观察者对象
	特点：连续发送一个事件序列，可指定范围（类似range，区别在于rangeLong支持类型：Long）
/**
 * 参数说明：
 * 参数1 = 事件序列起始点；
 * 参数2 = 事件数量；
 * 注：若设置为负数，则会抛出异常
 */
Observable.rangeLong(1000000, 10)
        // 该例子发送的事件序列特点：
        // 从3开始发送，每次发送事件递增1，一共发送10个事件
        .subscribe(new Observer<Long>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Long value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.2 变换操作符
	作用：对事件序列中的事件 / 整个事件序列进行加工处理（即变换），使得其转变成不同的事件 / 整个事件序列
	应用场景：嵌套回调（Callback）

包括以下操作符：
	map
	flatMap
	concatMap
	buffer
3.2.1 map
	作用：对被观察者发送的每一个事件都通过指定的函数处理，从而变换成另外一种事件即，将被观察者发送的事件转换为任意的类型事件
	场景：数据类型转换
 
// 采用RxJava基于事件流的链式操作
Observable.create(new ObservableOnSubscribe<Integer>() {

    // 1. 被观察者发送事件：参数为整型 = 1、2、3
    @Override
    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onNext(3);
    }
}).map(new Function<Integer, String>() {

    // 2. 使用Map变换操作符中的Function函数对被观察者发送的事件进行统一变换：整型变换成字符串类型
    @Override
    public String apply(@NonNull Integer integer) throws Exception {
        return "map" + integer;
    }
}).subscribe(new Consumer<String>() {

    // 3. 观察者接收事件时，是接收到变换后的事件 = 字符串类型
    @Override
    public void accept(@NonNull String s) throws Exception {
    }
});
3.2.2 flatMap
	作用：将被观察者发送的事件序列进行拆分 & 单独转换，再合并成一个新的事件序列，最后再进行发送
	场景：
	为事件序列中每个事件都创建一个 Observable 对象；
	将对每个原始事件转换后的新事件都放入到对应 Observable对象；
	将新建的每个Observable 都合并到一个新建的、总的Observable 对象；
	新建的、总的Observable 对象将新合并的事件序列发送给观察者（Observer）
 
// 采用RxJava基于事件流的链式操作
Observable.create(new ObservableOnSubscribe<Integer>() {

    @Override
    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onNext(3);
    }
}).flatMap(new Function<Integer, ObservableSource<String>>() {

    // 采用flatMap（）变换操作符
    @Override
    public ObservableSource<String> apply(Integer integer) throws Exception {
        final List<String> list = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            list.add("我是事件 " + integer + "拆分后的子事件" + i);
            // 通过flatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件
            // 最终合并，再发送给被观察者
        }
        return Observable.fromIterable(list);
    }
}).subscribe(new Consumer<String>() {

    @Override
    public void accept(@NonNull String s) throws Exception {
    }
});
3.2.3 concatMap
	作用：拆分 & 重新合并生成的事件序列的顺序 = 被观察者旧序列生产的顺序
	场景：有序的将被观察者发送的整个事件序列进行变换
 
// 采用RxJava基于事件流的链式操作
Observable.create(new ObservableOnSubscribe<Integer>() {

    @Override
    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onNext(3);
    }
}).concatMap(new Function<Integer, ObservableSource<String>>() {

    // // 采用concatMap（）变换操作符
    @Override
    public ObservableSource<String> apply(Integer integer) throws Exception {
        final List<String> list = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            list.add("我是事件 " + integer + "拆分后的子事件" + i);
            // 通过concatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件
            // 最终合并，再发送给被观察者
        }
        return Observable.fromIterable(list);
    }
}).subscribe(new Consumer<String>() {

    @Override
    public void accept(@NonNull String s) throws Exception {
    }
});
3.2.4 buffer
	作用：定期从被观察者（Obervable）需要发送的事件中获取一定数量的事件 & 放到缓存区中，最终发送
	场景：缓存被观察者发送的事件
 
// 被观察者需要发送5个数字
Observable.just(1, 2, 3, 4, 5)
        .buffer(3, 1) // 设置缓存区大小 & 步长
        // 缓存区大小 = 每次从被观察者中获取的事件数量
        // 步长 = 每次获取新事件的数量
        .subscribe(new Observer<List<Integer>>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(List<Integer> stringList) {
                LogUtils.d(TAG, " 缓存区里的事件数量 = " +  stringList.size());
                for (Integer value : stringList) {
                    LogUtils.d(TAG, " 事件 " + value);
                 }
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3 组合 & 合并操作符
作用：组合多个被观察者（Observable）& 合并需要发送的事件。
3.3.1 组合多个被观察者
作用：组合多个被观察者

包括以下操作符：
	concat
	concatArray
	merge
	mergeArray
	concatDelayError
	mergeDelayError
3.3.1.1 concat
	作用：
	组合多个被观察者一起发送数据，合并后按发送顺序串行执行
	concat（）组合被观察者数量 ≤ 4个
Observable.concat(Observable.just(1, 2),
        Observable.just(3, 4),
        Observable.just(5, 6),
        Observable.just(7, 8))
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) { 
	}

            @Override
            public void onNext(Integer value) { 
	}

            @Override
            public void onError(Throwable e) { 
}

            @Override
            public void onComplete() { 
}
        });
3.3.1.2 concatArray
	作用：
	组合多个被观察者一起发送数据，合并后按发送顺序串行执行
	concatArray（）组合被观察者数量 ＞ 4个
Observable.concatArray(Observable.just(1, 2),
        Observable.just(3, 4),
        Observable.just(5, 6),
        Observable.just(7, 8),
        Observable.just(9, 10))
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.1.3 merge
	作用：
	组合多个被观察者一起发送数据，合并后按时间线并行执行
	merge（）组合被观察者数量 ≤ 4个
 
Observable.merge(
        // 从0开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(0, 3, 1, 1, TimeUnit.SECONDS),
        // 从2开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(2, 3, 1, 1, TimeUnit.SECONDS))
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Long>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Long value) {
                // 输出结果 = 0,2 -> 1,3 -> 2,4
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.1.4 mergeArray
	作用：
	组合多个被观察者一起发送数据，合并后按时间线并行执行
	mergeArray（）组合被观察者数量 ＞ 4个
Observable.mergeArray(
        // 从0开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(0, 3, 1, 1, TimeUnit.SECONDS),
        // 从2开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(2, 3, 1, 1, TimeUnit.SECONDS),
        // 从4开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(4, 3, 1, 1, TimeUnit.SECONDS),
        // 从6开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(6, 3, 1, 1, TimeUnit.SECONDS),
        // 从8开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(8, 3, 1, 1, TimeUnit.SECONDS))
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Long>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Long value) {
                // 输出结果 = 0,2,4,6,8 -> 1,3,5,7,9 -> 2,4,6,8,10
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.1.5 concatDelayError
	作用：onError事件推迟到其它被观察者发送事件结束后才触发

Observable.concatArrayDelayError(
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
                emitter.onNext(1);
                emitter.onNext(2);
                // 发送Error事件，因为使用了concatDelayError，
                // 所以第2个Observable将会发送事件，等发送完毕后，再发送错误事件
                emitter.onError(new NullPointerException());
                emitter.onComplete();
            }
        }),
        Observable.just(4, 5))
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.1.6 mergeDelayError
	作用：onError事件推迟到其它被观察者发送事件结束后才触发

Observable.mergeArrayDelayError(
        Observable.create(new ObservableOnSubscribe<Integer>() {
            @Override
            public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {

                emitter.onNext(1);
                emitter.onNext(2);
                // 发送Error事件，因为使用了concatDelayError，
                // 所以第2个Observable将会发送事件，等发送完毕后，再发送错误事件
                emitter.onError(new NullPointerException());
                emitter.onComplete();
            }
        }),
        Observable.just(4, 5))
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.2 合并多个事件
作用：合并多个被观察者（Observable）发送的事件，生成一个新的事件序列（即组合过后的事件序列），并最终发送

包括以下操作符：
	zip
	combineLatest
	reduce
	collect
3.3.2.1 zip
	作用： 
	合并多个被观察者（Observable）发送的事件
	生成一个新的事件序列（即组合过后的事件序列），并最终发送
	注意：
	事件组合方式 = 严格按照原先事件序列进行对位合并
	最终合并的事件数量 = 多个被观察者（Observable）中数量最少的数量
 
// 创建第1个被观察者
Observable<Integer> observable1 = Observable.create(new ObservableOnSubscribe<Integer>() {
    @Override
    public void subscribe(ObservableEmitter<Integer> emitter) throws Exception {
        emitter.onNext(1);
        emitter.onNext(2);
        emitter.onNext(3);
        emitter.onComplete();
    }
}).subscribeOn(Schedulers.io()); // 设置被观察者1在工作线程1中工作

// 创建第2个被观察者
Observable<String> observable2 = Observable.create(new ObservableOnSubscribe<String>() {
    @Override
    public void subscribe(ObservableEmitter<String> emitter) throws Exception {
        emitter.onNext("A");
        emitter.onNext("B");
        emitter.onNext("C");
        emitter.onNext("D");
        emitter.onComplete();
    }
}).subscribeOn(Schedulers.newThread());// 设置被观察者2在工作线程2中工作
// 假设不作线程控制，则该两个被观察者会在同一个线程中工作，即发送事件存在先后顺序，而不是同时发送

// 使用zip变换操作符进行事件合并
// 注：创建BiFunction对象传入的第3个参数 = 合并后数据的数据类型
Observable.zip(observable1, observable2,
        new BiFunction<Integer, String, String>() {

            @Override
            public String apply(Integer integer, String string) throws Exception {
                return  integer + string;
            }
        }).subscribe(new Observer<String>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(String value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.2.2 combineLatest
	作用： 
	当两个Observables中的任何一个发送了数据后，将先发送了数据的Observables 的最新（最后）一个数据与另外一个Observable发送的每个数据结合，最终基于该函数的结果发送数据
	与Zip（）的区别：
	Zip（） = 按个数合并，即1对1合并；CombineLatest（）= 按时间合并，即在同一个时间点上合并
Observable.combineLatest(
        // 第1个发送数据事件的Observable
        Observable.just(1L, 2L, 3L),
        // 第2个发送数据事件的Observable：从0开始发送、共发送3个数据、第1次事件延迟发送时间 = 1s、间隔时间 = 1s
        Observable.intervalRange(0, 3, 1, 1, TimeUnit.SECONDS),
        new BiFunction<Long, Long, Long>() {

            @Override
            public Long apply(Long o1, Long o2) throws Exception {
                // o1 = 第1个Observable发送的最新（最后）1个数据
                // o2 = 第2个Observable发送的每1个数据
                return o1 + o2;
                // 合并的逻辑 = 相加
                // 即第1个Observable发送的最后1个数据 与 第2个Observable发送的每1个数据进行相加
            }
        })
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Consumer<Long>() {
            @Override
            public void accept(Long s) throws Exception {
            }
        });
3.3.2.3 reduce
	作用： 
	把被观察者需要发送的事件聚合成1个事件 & 发送
	聚合的逻辑根据需求撰写，但本质都是前2个数据聚合，然后与后1个数据继续进行聚合，依次类推
Observable.just(1, 2, 3, 4)
        .reduce(new BiFunction<Integer, Integer, Integer>() {

            // 在该方法中写聚合的逻辑
            @Override
            public Integer apply(@NonNull Integer s1, @NonNull Integer s2) throws Exception {
                return s1 * s2;
                // 本次聚合的逻辑是：全部数据相乘起来
                // 原理：第1次取前2个数据相乘，之后每次获取到的数据 = 返回的数据x原始下1个数据每
            }
        }).subscribe(new Consumer<Integer>() {

            @Override
            public void accept(@NonNull Integer s) throws Exception {
            }
        });
3.3.2.4 collect
	作用：将被观察者Observable发送的数据事件收集到一个数据结构里
Observable.just(1, 2, 3 ,4, 5, 6)
        .collect(new Callable<ArrayList<Integer>>() {
                     // 1. 创建数据结构（容器），用于收集被观察者发送的数据
                    @Override
                    public ArrayList<Integer> call() throws Exception {
                        return new ArrayList<>();
                    }
                }, new BiConsumer<ArrayList<Integer>, Integer>() {

                    // 2. 对发送的数据进行收集
                    @Override
                    public void accept(ArrayList<Integer> list, Integer integer) throws Exception {
                        // 参数说明：list = 容器，integer = 后者数据
                        list.add(integer);
                        // 对发送的数据进行收集
                    }
                }).subscribe(new Consumer<ArrayList<Integer>>() {

                    @Override
                    public void accept(@NonNull ArrayList<Integer> s) throws Exception {
                    }
                });
3.3.3 发送事件前追加发送事件
	作用：在一个被观察者发送事件前，追加发送一些数据 / 一个新的被观察者

包括以下操作符：
	startWith
	startWithArray
3.3.3.1 startWith
	作用：在一个被观察者发送事件前，追加发送一些数据 / 一个新的被观察者
// 在一个被观察者发送事件前，追加发送一些数据
// 注：追加数据顺序 = 后调用先追加
Observable.just(4, 5, 6)
        .startWith(0)  // 追加单个数据 = startWith()
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });

// 在一个被观察者发送事件前，追加发送被观察者 & 发送数据
// 注：追加数据顺序 = 后调用先追加
Observable.just(4, 5, 6)
        .startWith(Observable.just(1, 2, 3))
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.3.2 startWithArray
	作用：在一个被观察者发送事件前，追加发送一些数据 / 一个新的被观察者
// 注：追加数据顺序 = 后调用先追加
Observable.just(4, 5, 6)
        .startWithArray(1, 2, 3) // 追加多个数据 = startWithArray()
        .subscribe(new Observer<Integer>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.3.4 统计发送事件数量
	作用：统计被观察者发送事件的数量

包括以下操作符：
	count
3.3.4.1 count
// 注：返回结果 = Long类型
Observable.just(1, 2, 3, 4)
        .count()
        .subscribe(new Consumer<Long>() {
            @Override
            public void accept(Long aLong) throws Exception {
            }
        });
3.4 功能性操作符
	作用：辅助被观察者（Observable） 在发送事件时实现一些功能性需求

包括以下操作符：
	subscribe 连接被观察者 & 观察者
	schedule线程调度
	delay延迟操作
	repeat重复发送操作
	do生命周期do
3.4.1 subscribe
	作用：订阅，即连接观察者 & 被观察者
	场景：使得被观察者 & 观察者 形成订阅关系
// 1. 通过create（）创建被观察者 Observable 对象
Observable observable = Observable.create(new ObservableOnSubscribe<String>() {
    @Override
    public void subscribe(ObservableEmitter e) throws Exception {
        // 定义需要发送的事件
        e.onNext("我是subscribe操作符demo");
        e.onComplete();
    }
});

// 2. 创建观察者 & 定义响应事件的行为
Observer observer = new Observer<String>() {

    @Override
    public void onSubscribe(Disposable d) {
    }

    @Override
    public void onNext(String s) {
    }

    @Override
    public void onError(Throwable e) {
    }

    @Override
    public void onComplete() {
    }
};

// 3. 通过通过订阅（subscribe）连接观察者和被观察者
observable.subscribe(observer);
3.4.2 schedule
	待续。。。
3.4.3 delay
	作用：使得被观察者延迟一段时间再发送事件
	场景：在被观察者发送事件前进行一些延迟的操作
// 1. 指定延迟时间
// 参数1 = 时间；参数2 = 时间单位
// delay(long delay, TimeUnit unit)

// 2. 指定延迟时间 & 调度器
// 参数1 = 时间；参数2 = 时间单位；参数3 = 线程调度器
// delay(long delay, TimeUnit unit, Scheduler scheduler)

// 3. 指定延迟时间  & 错误延迟
// 错误延迟，即：若存在Error事件，则如常执行，执行后再抛出错误异常
// 参数1 = 时间；参数2 = 时间单位；参数3 = 错误延迟参数
// delay(long delay, TimeUnit unit, boolean delayError)

// 4. 指定延迟时间 & 调度器 & 错误延迟
// 参数1 = 时间；参数2 = 时间单位；参数3 = 线程调度器；参数4 = 错误延迟参数
// delay(long delay, TimeUnit unit, Scheduler scheduler, boolean delayError)
// 指定延迟多长时间并添加调度器，错误通知可以设置是否延迟
Observable.just(1, 2, 3)
        .delay(3, TimeUnit.SECONDS) // 延迟3s再发送
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {
                disposable = d;
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.4.4 repeat
	作用：无条件地、重复发送 被观察者事件
	场景：重复不断地发送被观察者事件
// 不传入参数 = 重复发送次数 = 无限次
// repeat（）；
// 传入参数 = 重复发送次数有限
// repeatWhen（Integer int）；

// 注：
// 1. 接收到.onCompleted()事件后，触发重新订阅 & 发送
// 2. 默认运行在一个新的线程上
Observable.just(1, 2)
        .repeat(3) // 重复创建次数 = 3次
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.4.5 do
	作用：在某个事件的生命周期中调用
	场景：在事件发送 & 接收的整个生命周期过程中进行操作，如：发送事件前的初始化、发送事件后的回调请求等
Observable.create(new ObservableOnSubscribe<Integer>() {
    @Override
    public void subscribe(ObservableEmitter<Integer> e) throws Exception {
        e.onNext(1);
        e.onNext(2);
        e.onError(new Throwable("发生错误了"));
    }
})      // 1. 当Observable每发送1次数据事件就会调用1次
        .doOnEach(new Consumer<Notification<Integer>>() {
            @Override
            public void accept(Notification<Integer> integerNotification) throws Exception {
            }
        })
        // 2. 执行Next事件前调用
        .doOnNext(new Consumer<Integer>() {
            @Override
            public void accept(Integer integer) throws Exception {
            }
        })
        // 3. 执行Next事件后调用
        .doAfterNext(new Consumer<Integer>() {
            @Override
            public void accept(Integer integer) throws Exception {
            }
        })
        // 4. Observable正常发送事件完毕后调用
        .doOnComplete(new Action() {
            @Override
            public void run() throws Exception {
            }
        })
        // 5. Observable发送错误事件时调用
        .doOnError(new Consumer<Throwable>() {
            @Override
            public void accept(Throwable throwable) throws Exception {
            }
        })
        // 6. 观察者订阅时调用
        .doOnSubscribe(new Consumer<Disposable>() {
            @Override
            public void accept(@NonNull Disposable disposable) throws Exception {
            }
        })
        // 7. Observable发送事件完毕后调用，无论正常发送完毕 / 异常终止
        .doAfterTerminate(new Action() {
            @Override
            public void run() throws Exception {
            }
        })
        // 8. 最后执行
        .doFinally(new Action() {
            @Override
            public void run() throws Exception {
            }
        })
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<Integer>() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Integer value) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
3.5 过滤操作符
	待续。。。
3.6 条件 & 布尔操作符
	待续。。。
4 RxJava被压策略

5 RxJava实例应用
常用应用场景：
	功能防抖
	获取缓存数据
	合并 & 展示数据
	联合判断
	联想搜索优化
	RxJava & Retrofit实现网络请求
5.1 功能防抖
	需求场景
	背景：用户只需要使用功能1次
	冲突：由于外部原因，多次触发了功能，导致出现冗余功能操作
	实例：用户只需要使用网络请求功能1次（点击按钮），但是由于网络不好，点击1次后用户发现无响应，于是多次点击按钮，导致多次发送网络请求
	解决方案：功能防抖
	原理：通过根据指定时间过滤事件的过滤操作符实现，防止功能的抖动
	功能说明
	功能防抖：用户在规定的时间内多次触发该功能，仅会响应第1次触发操作
	原理：使用根据指定时间过滤事件的过滤操作符实现
	throttleFirst：在规定的时间内，仅会响应第1次操作
/**
  * 1. 此处采用了RxBinding：RxView.clicks(button) = 对控件点击进行监听，
  * 需要引入依赖：compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
  * 2. 传入Button控件，点击时，都会发送数据事件（但由于使用了throttleFirst（）操作符，
  * 所以只会发送该段时间内的第1次点击事件）
 */
RxView.clicks(button)
        // 只发送 2s内第1次点击按钮的事件
        .throttleFirst(2, TimeUnit.SECONDS)
        .subscribe(new Observer<Object>() {
            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Object value) {
                // 在2s内，无论点击多少次，也只会发送1次网络请求
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
5.2 获取缓存数据
	需求场景
	背景：需要向服务器获取数据
	冲突：每次获取数据时都通过网络请求向服务器获取会浪费很多资源（流量、时间）
	解决方案：从缓存中读取数据，即，当需要获取数据时
	先从本地的磁盘 / 内存 缓存中获取所需的数据
	若上述缓存中都无所需数据，才通过网络请求向服务器获取数据
	本质：降低二次获取数据的成本（流量 & 时间）
	原理：组合操作符：concat() + 过滤操作符：firstElement()

 
// 设置第1个Observable：检查内存缓存是否有该数据的缓存
Observable<String> memory = Observable.create(new ObservableOnSubscribe<String>() {
    @Override
    public void subscribe(ObservableEmitter<String> emitter) throws Exception {
        // 先判断内存缓存有无数据
        if (memoryCache != null) {
            // 若有该数据，则发送
            emitter.onNext(memoryCache);
        } else {
            // 若无该数据，则直接发送结束事件
            emitter.onComplete();
        }
    }
});

// 设置第2个Observable：检查磁盘缓存是否有该数据的缓存
Observable<String> disk = Observable.create(new ObservableOnSubscribe<String>() {
    @Override
    public void subscribe(ObservableEmitter<String> emitter) throws Exception {
        // 先判断磁盘缓存有无数据
        if (diskCache != null) {
            // 若有该数据，则发送
            emitter.onNext(diskCache);
        } else {
            // 若无该数据，则直接发送结束事件
            emitter.onComplete();
        }
    }
});

// 设置第3个Observable：通过网络获取数据
Observable<String> network = Observable.just("从网络中获取数据");
// 此处仅作网络请求的模拟

// 通过concat（） 和 firstElement（）操作符实现缓存功能
// 1. 通过concat（）合并memory、disk、network 3个被观察者的事件（即检查内存缓存、磁盘缓存 & 发送网络请求）
// 并将它们按顺序串联成队列
Observable.concat(memory,
        disk,
        network)
        // 2. 通过firstElement()，从串联队列中取出并发送第1个有效事件（Next事件），
        // 即依次判断检查memory、disk、network
        .firstElement()
        // 即本例的逻辑为：
        // a. firstElement()取出第1个事件 = memory，即先判断内存缓存中有无数据缓存；
        // 由于memoryCache = null， 即内存缓存中无数据，所以发送结束事件（视为无效事件）
        // b. firstElement()继续取出第2个事件 = disk，
        // 即判断磁盘缓存中有无数据缓存：由于diskCache ≠ null，即磁盘缓存中有数据，
        // 所以发送Next事件（有效事件）
        // c. 即firstElement()已发出第1个有效事件（disk事件），所以停止判断。

        // 3. 观察者订阅
        .subscribe(new Consumer<String>() {
            @Override
            public void accept( String s) throws Exception {
            }
        });
5.3 合并 & 展示数据
	需求场景
	背景：获取数据 & 统一展示到客户端
	冲突：来自不同的地方（本地 、网络），即：数据源多样
	解决方案：采用RxJava组合操作符merge() 和 zip()
	功能说明：同时向2个数据源获取数据 -> 合并数据 -> 统一展示到客户端
// 用于存放最终展示的数据
String result = "数据源来自 = ";

// 设置第1个Observable：通过网络获取数据
Observable<String> network = Observable.just("网络");

// 设置第2个Observable：通过本地文件获取数据
Observable<String> file = Observable.just("本地文件");

// 通过merge（）合并事件 & 同时发送事件
Observable.merge(network, file)
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<String>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(String value) {
                result += value + "+";
            }

            @Override
            public void onError(Throwable e) {
            }

            // 接收合并事件后，统一展示
            @Override
            public void onComplete() {
                // 去掉最后一个"+"
                result = result.toString().substring(0, result.length() - 1);
                // 重新赋值
                result = "数据源来自 = ";
            }
        });
5.4 联合判断
	需求场景：需要同时对多个事件进行联合判断，如：填写表单时，需要表单里所有信息（姓名、年龄、职业等）都被填写后，才允许点击 “提交” 按钮
	功能说明：此处采用 填写表单 作为联合判断功能展示，即：表单里所有信息（姓名、年龄、职业等）都被填写后，才允许点击 “提交” 按钮
	原理：采用 RxJava 组合操作符中的combineLatest（） 实现

/**
 * 步骤1：为每个EditText设置被观察者，用于发送监听事件
 *
 * 说明：
 * 1. 此处采用了RxBinding：RxTextView.textChanges(name) = 对对控件数据变更进行监听（功能类似TextWatcher），
 * 需要引入依赖：compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
 * 2. 传入EditText控件，点击任1个EditText撰写时，都会发送数据事件 = Function3（）的返回值（下面会详细说明）
 * 3. 采用skip(1)原因：跳过 一开始EditText无任何输入时的空值
 */
Observable<CharSequence> nameObservable = RxTextView.textChanges(name).skip(1);
Observable<CharSequence> ageObservable = RxTextView.textChanges(age).skip(1);
Observable<CharSequence> jobObservable = RxTextView.textChanges(job).skip(1);

// 步骤2：通过combineLatest（）合并事件 & 联合判断
Observable.combineLatest(nameObservable,
        ageObservable,
        jobObservable,
        new Function3<CharSequence, CharSequence, CharSequence, Boolean>() {

            @Override
            public Boolean apply(@NonNull CharSequence charSequence, @NonNull CharSequence charSequence2, @NonNull CharSequence charSequence3) throws Exception {
                // 步骤3：规定表单信息输入不能为空
                // 1. 姓名信息
                boolean isUserNameValid = !TextUtils.isEmpty(name.getText()) ;
                // 除了设置为空，也可设置长度限制
                // boolean isUserNameValid = !TextUtils.isEmpty(name.getText()) &&
                // (name.getText().toString().length() > 2 &&
                // name.getText().toString().length() < 9);

                // 2. 年龄信息
                boolean isUserAgeValid = !TextUtils.isEmpty(age.getText());
                // 3. 职业信息
                boolean isUserJobValid = !TextUtils.isEmpty(job.getText());

                // 步骤4：返回信息 = 联合判断，即3个信息同时已填写，"提交按钮"才可点击
                return isUserNameValid && isUserAgeValid && isUserJobValid;
            }
}).subscribe(new Consumer<Boolean>() {

    @Override
    public void accept(Boolean s) throws Exception {
        // 步骤5：返回结果 & 设置按钮可点击样式
        button.setEnabled(s);
    }
});

RxView.clicks(button)
        // 只发送 2s内第1次点击按钮的事件
        .throttleFirst(2, TimeUnit.SECONDS)
        .subscribe(new Observer<Object>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(Object value) {
                LogUtils.d(TAG, "提交个人信息" );
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
5.5 联想搜索优化
	需求场景
	背景：实现联想搜索功能，即每当用户输入1个字符，立即显示与当前输入框内字符相关的搜索结果
	实现流程：
	通过EditText.addTextChangedListener()监听输入框变化
	当输入框发生变化后，回调afterTextChanged()将当前输入框的文字向服务器发起请求
	服务器返回与该搜索文字关联的结果
	冲突：在用户搜索需求明确的情况下（体现为连续输入），可能会发起一些不必要的网络请求，实例：
	用户搜索需求明确 = abc，即连续输入了abc
	按上面实现，客户端会向服务器发起a、ab、abc 3个网络请求，即多发起了a、ab 2个不必要的网络请求
	解决方案：通过根据指定时间过滤事件的过滤操作符（debounce）实现，防止不必要的网络请求
	功能说明
	实现原理：通过根据指定时间过滤事件的过滤操作符（debounce）实现，防止不必要的网络请求
	功能逻辑
	当输入框发生变化时，不会立即将当前输入框内的文字发送给服务器，而是等待一段时间
	若在这段时间内，输入框不再有文字输入（无发生变化），那么才发送输入框内的文字给服务器
	如在这段时间内，输入框有文字输入（发生变化），则继续等待该段时间，循环上述过程
/**
 * 说明
 * 1. 此处采用了RxBinding：RxTextView.textChanges(name) = 对对控件数据变更进行监听（功能类似TextWatcher），
 * 需要引入依赖：compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
 * 2. 传入EditText控件，输入字符时都会发送数据事件（此处不会马上发送，因为使用了debounce（））
 * 3. 采用skip(1)原因：跳过 第1次请求 = 初始输入框的空字符状态
 */
RxTextView.textChanges(key)
        .debounce(1, TimeUnit.SECONDS)
        .skip(1)
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Observer<CharSequence>() {

            @Override
            public void onSubscribe(Disposable d) {
            }

            @Override
            public void onNext(CharSequence charSequence) {
            }

            @Override
            public void onError(Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        });
5.6 RxJava & Retrofit实现网络请求
	网络请求嵌套回调
	网络请求轮询（有条件）
	网络请求轮询（无条件）
	网络请求出错重连
5.6.1 网络请求嵌套回调

5.6.2 网络请求轮询（有条件）

5.6.3 网络请求轮询（无条件）

5.6.4 网络请求出错重连
